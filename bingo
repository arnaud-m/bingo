#!/usr/bin/octave -qf
###################################################
##
##Copyright (C) 2011 Arnaud Malapert.
##
## This program is a free software: you can redistribute it and/or modify	                   
##  it under the terms of the GNU General Public License as published by                 
## the Free Software Foundation, either version 3 of the License, or                          
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.");
##
###################################################


1; #not a function file

####################################################
#################### Utilities ##########################
####################################################

global VERSION="0.1"
global verbose=0

 function _version()
   global VERSION;
   printf("%s %s\n", program_name(), VERSION);
   disp("Copyright (C) 2011 Arnaud Malapert.");
   disp("This program is free software: you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or \n(at your option) any later version.");
 endfunction

function _help()
  printf("%s generates benchmark instances for batch processing problems.", program_name());
   
  printf("\n\tUsage: %s [OPTION] FILE N \n", program_name());
  disp("")
  disp("Options:")
  disp("\t--verbose      verbose mode\n")
  disp("\t--help        display this help and exit")
  disp("\t--version     output version information and exit");
          
  disp("\n\nReport bugs to <arnaud (dot) malapert (at) unice (dot) fr>.")
 endfunction


################ random generation ####################

function V=randb(nb , n , p)
  V= 1 + binornd(n-1, p, nb, 1);
endfunction

function V=rand_switch(nb, Dist) 
  switch(Dist(1)) 
    case 0
      V=randi(Dist(2:3), nb,1);
    case 1 
      V=randb(nb, Dist(2), Dist(3)); 
    case 2 
      nbT = randi(nb);
      V = [];
      if( nbT > 0)
	V=randb(nbT, Dist(2), Dist(3)); 
      endif
      nbT = nb - nbT;
      if( nbT > 0)
	V= [ V ; randb(nbT, Dist(4), Dist(5))]; 
      endif
      #random permutation of the vector.
      V = V(randperm(nb));
    otherwise 
      error(cstrcat("Unknown distribution type for random generation : ", int2str(Dist(1))));
  endswitch 
endfunction


function M=makePSW(nb, P, S, W) 
  M= [ rand_switch(nb, P) rand_switch(nb, S) rand_switch(nb, W) ];
endfunction

function checkPSW(M, capacity)
  if (all( all(M(: , [ 1 2 3]) == 0))) 
    error "Some durations, sizes or weights are negative or nil."
  endif
  if (any(M(: , 2) > capacity)) 
    error "Some sizes are greater than the bin capacity"
  endif
endfunction




function P=compute_1_PBatch_Cmax(M, capacity)
  [S, R] = sort (M (:, 1));
  n = size(M,1);
  P=zeros(n,1);
  for i=1:n
    Ri = R(find( R <= i));
    ##add dummy jobs to ensure that sum s_j is a multiple of the capacity
    csize = capacity - mod( sum(M([1:i], 2)), capacity);
     for j=1:i
       csize += M(Ri(j), 2);
       if(csize >= capacity)
	 csize -= capacity;
	 P(i) += M(Ri(j), 1);
	endif 
      endfor
     if(csize > 0)
       error("subproblem resolution \t[FAIL]");
     endif
   endfor 
endfunction


function R=rangeDClassic(makespan, t, r) 
  R= [ floor( makespan * (1 - t - 0.5* r)), ceil(makespan * (1 - t  + 0.5* r))];
endfunction

function R=rangeDManager(makespan, t, r) 
  R =[ floor( makespan * (1 - t*r)), ceil( makespan * (1+ (1-t)*r))] ;
endfunction



#################### PDF ########################
function check_pdf(V)
  s = sum(V);
  if( s < 0.99999 || s>1.00001) 
    format long E
    sum(V)
    error("pdf calculation\t[FAIL]");
    endif
endfunction

function V=pdfi(gmax, min, max)
  l=max - min + 1;
  V=[zeros(min,1) ; ones(l,1)/l ; zeros(gmax- max, 1) ];
  check_pdf(V);
endfunction

function V=pdfb(gmax, n , p)
  V= [0 ; binopdf([0:(n-1)]', n-1, p) ;zeros( gmax - n, 1)  ];
  check_pdf(V);
endfunction

function V=pdf_switch(max, Dist) 
  switch(Dist(1)) 
    case 0
      V=pdfi(max, Dist(2), Dist(3));
    case 1 
      V=pdfb(max, Dist(2), Dist(3)); 
    case 2 
      V= (pdfb(max, Dist(2), Dist(3)) .+ pdfb(max, Dist(4), Dist(5)))/2;
    otherwise 
      error(cstrcat("Unknown distribution type for pdf calculation : ", int2str(Dist(1))));
  endswitch 
endfunction


function PDF=computePDF(M)
  gmax = max (max(M));
  PDF = [0:gmax]';
  for i = 1:rows(M);
    PDF = [ PDF pdf_switch(gmax, M(i, :))];
  endfor
endfunction



#################### String ########################

function str=d2str(prefix, Dist)
   switch (Dist(1)) 
     case 0
       str=sprintf( "%s = U[%i,%i]" ,prefix, Dist(2:3));
     case 1 
       str=sprintf( "%s = B(%i,%g)" ,prefix, Dist(2:3)); 
     case 2
       str=sprintf( "%s = B2(B(%i,%g), B(%i,%g))" ,prefix, Dist(2:5)); 
     otherwise 
      error(cstrcat("Unknown distribution type for random generation : ", int2str(Dist(1))));
  endswitch 
endfunction

function str=dd2str(mode, t, r)
  switch(mode)
    case "DC"
      str=sprintf("D(%g,%g) = U[Pn(1 - t - R/2), Pn(1 - t + R/2)", t, r);
    case "DM"
      str=sprintf("D(%g,%g) = U[Pj(1 - t x R), Pj(1 + (1 - t) x R)]", t, r);
    otherwise
      error(cstrcat("Unknown due date distribution type for random generation : ", mode));
  endswitch;
endfunction


#################### Plotting ########################

#some color definitions
blue_025=[0.447 0.592 0.902];
green_025=[0.404 0.922 0.518];
red_025=[0.976  0.478 0.427];
brown_025 = [ 0.97647 0.7882 0.4274];
blue_075 = [0.1843 0.24706   0.37647];
global my_colors={ blue_025, green_025, red_025, brown_025, blue_075};
global my_types={"durations", "sizes", "weights"};


function plotFrequencies(prefix, M)
  close all
  global my_colors;
  global my_types;
  max = [ max(max(M)) 1] ;
  h = bar( [ accumarray(M(:,1),1, max) accumarray(M(:,2),1, max) accumarray(M(:,3),1, max)]) ;
  for i=1:3
    set (h(i), "facecolor", my_colors{i});
    set (h(i), "edgecolor", my_colors{i});
  endfor
  xlabel("Value");
  ylabel("#Occurences");
  title("Frequencies");
  legend ( my_types{1},  my_types{2},  my_types{3});
  print(strcat(prefix, "-frequencies.svg"), "-dsvg")
endfunction

function plotStatistics(M)
  close all;
  global my_colors;
  global my_types;
  h=errorbar(M(:,[1:3]), M(:, [4:6]));
  title("Means and standard deviations")
  xlabel("Instance");
  ylabel("Value");
  for i=1:3
    set (h(i), "color", my_colors{i});
  endfor
  set (h, "linewidth", 2);
  legend ( my_types{1},  my_types{2},  my_types{3});
  disp("statistical summary of the generated instances plotted in file summary-statistics.svg")
  print("summary-statistics.svg", "-dsvg")
endfunction

function plotPDF(P, S, W)
  close all
  global my_colors;
  title("Probability Density Functions");
  ylabel("Probability Density");
  xlabel("Value");
  RP=[ 2:columns(P)];
  RS=[ 2:columns(S)];
  RW=[ 2:columns(W)];
%  ymax =ceil( max ( [ max(P(:,RP)) max(S(:,RS)) max(W(:,RW)) ])*10)/10;
  h=plot(P(:, 1), P(:, RP), ";durations;", S(:, 1), S(:, RS), ";sizes;", W(:, 1), W(:, RW), ";weights;");
#   h=plot(P(:, 1), P(:, RP), S(:, 1), S(:, RS), W(:, 1), W(:, RW));
 set (h, "linewidth", 2); 
  cpt = 1;
  for i = 1:rows(h)
    for j = 1:columns(h)
      ##Legend
      if(cpt != 1 && cpt != length(RP) + 1  && cpt != length(RP) + length(RS) + 1 )
	set(h(i,j), "displayname", "");
      endif
      ##Colours 
       if(cpt <= length(RP))
	 set(h(i,j), "color", my_colors{1});
       elseif(cpt <= length(RP) + length(RS))
	 set(h(i,j), "color", my_colors{2});
       else
	 set(h(i,j), "color", my_colors{3}); 
       endif	
       cpt++;
     endfor
   endfor
   disp("Probability density functions plotted in file summary-pdf.svg")
   print("summary-pdf.svg", "-dsvg")
#   pause
endfunction


#################### Export ########################
function save_instance(info, n, capacity, DATA, STATS)
  global VERSION;
  global verbose;
  if(size(DATA, 1) != n || size(DATA, 2) != 4)
    error("invalid generated data");
    exit(-1);
  endif
  filename = strcat(info{1}, ".txt");
  fid = fopen (filename, "w");
  fprintf(fid, "#%s created on %s by %s %s (octave %s).\n", info{1}, date, program_name(), VERSION, version);
  fprintf(fid, "#%s\n# %s\n# %s\n# %s\n",  info{2}, info{3}, info{4}, info{5})
  fprintf(fid, "%i\n%i\n",  n, capacity)
  fprintf (fid, "%3i %3i %3i %4i\n", DATA');
  r = rows(STATS);
  fprintf (fid, "#Averages\n#%3i %3i %3i %4i\n#Standard deviations\n#%3i %3i %3i %4i", STATS(r,1:3), mean(DATA(:,4)), STATS(r,4:6), std(DATA(:,4)));
  fclose (fid);
  if(verbose)
    printf("Generation of %s\t[OK]\n",info{1});
  endif
endfunction


####################################################
#################### Main Script ##########################
####################################################
setenv("GNUTERM", "wxt")

################### Read arguments #######################
args = argv ();
argidx=1;
if( nargin > 0)
  if(strcmp(args{1},"--version"))
    _version();
    exit(0);
  elseif(strcmp(args{1},"--help"))
    _help();
    exit(0);
  elseif(strcmp(args{1},"--verbose"))
    argidx=2;
    verbose=1;
  endif
else
  _help();
  exit(1);
endif


if(nargin >= argidx)
  load(args{argidx++});
else
  _help();
  exit(1);
endif

nb = 1;
if(nargin >= argidx)
  tmp=str2num(args{argidx++});
  if( ! isnan(tmp))
    nb = tmp;
  else
    warning("unable to read the number of instances: %s (set to default -> %d).", args{argidx-1}, nb);
  endif
endif

if(nargin >= argidx)
  warning("too many arguments");
  _help();
  exit(1);
endif
################### Compute PDFs #######################


PDF_P=computePDF(P);
PDF_S=computePDF(S);
PDF_W=computePDF(W);
plotPDF(PDF_P, PDF_S, PDF_W)

############ Loop over number of jobs, durations, sizes and weights ##########
if(nb > 0)
  info = cell(1,5);
  STATS=[];
  for n = 1:length(N)
    for p = 1:rows(P)
      info{2} = d2str("P", P(p,:)) ;
      for s = 1:rows(S)
	info{3} = d2str("S", S(s,:)) ;
	for w = 1:size(W)
	  info{4} = d2str("W", W(w,:));
	  prefix=strcat("N", int2str(n),"P", int2str(p),"S", int2str(s),"W", int2str(w));
	  dd=1; 
	  dd2 = length(D)*length(D);
	  if(2*dd2 > 10) 
	    dd_format = "%0.2i";
	  else
	    dd_format = "%i";
	  endif
	  for t = D
      	    for r = D
	      for i = 1:nb
		DATA=makePSW(N(n), P(p,:), S(s,:), W(w,:));
		STATS=[ STATS; mean(DATA) std(DATA)];
		checkPSW(DATA, capacity);
		if(verbose)
		  plotFrequencies(strcat(prefix, "_", int2str(i)), DATA)
		endif
		## Estimate makespan
		makespans =  compute_1_PBatch_Cmax(DATA, capacity);
		################## Managerial Due Dates ########################
		info{5}=dd2str("DM", t, r);
		info{1} = strcat(prefix, "D", num2str(dd, dd_format), "_", int2str(i));
		tmp = zeros(N(n),1);
		for idx = 1:N(n)
		  tmp(idx) = randi( rangeDManager(makespans(idx), t, r));
		endfor
		save_instance(info, N(n), capacity,[ DATA tmp], STATS);
		################## Classical Due Dates ########################
		info{5}=dd2str("DC", t, r);
		info{1} =  strcat(prefix, "D", num2str(dd2 + dd, dd_format), "_", int2str(i));
		save_instance(info, N(n), capacity, [ DATA  randi( rangeDClassic(makespans(N(n)), t, r), N(n),1) ], STATS);
		######################################################
	      endfor
	      dd++;  
	    endfor
	  endfor
	endfor
      endfor
    endfor
  endfor
  STATS= round(STATS*100)/100;
  plotStatistics(STATS);
else 
  warning "No benchmark generation." 
endif



